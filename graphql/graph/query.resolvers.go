package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"

	"github.com/makrorof/gorm-graphql-postgres-echo-auth/graphql/graph/model"
	"github.com/makrorof/gorm-graphql-postgres-echo-auth/tools"
)

// Requests is the resolver for the requests field.
func (r *queryResolver) Requests(ctx context.Context) ([]*model.ScanRequest, error) {
	panic(fmt.Errorf("not implemented: Requests - requests"))
}

// ScannedProducts is the resolver for the scannedProducts field.
func (r *queryResolver) ScannedProducts(ctx context.Context, requestID string, sortBy *model.SortBy) ([]*model.ScannedProductInfo, error) {
	//panic(fmt.Errorf("not implemented: ScannedProducts - scannedProducts"))

	sortByList := tools.GetValuesFromSelections(ctx, &model.SortBy{})

	for key, val := range sortByList {
		sortBy := val.(*model.SortBy)
		fmt.Println("Key:", key, " Value: ", *sortBy)
	}

	dummy := make([]*model.ScannedProductInfo, 0)

	for i := 0; i < 50; i++ {
		productID := "UPC" + fmt.Sprint(i)
		leftPrice := (3.4 * float64(i))
		rightPrice := (4.4 * float64(i)) + float64(i)
		leftSeller := "Left product seller"
		rightSeller := "Right product seller"
		dummy = append(dummy, &model.ScannedProductInfo{
			Profit: rightPrice - leftPrice,
			LeftProductInfo: &model.ProductInfo{
				ID:         productID,
				Type:       model.ProductIDTypeUpc,
				Title:      "HELLO WORLD DUMMY PRODUCT FALAN, ID:" + productID,
				Price:      &leftPrice,
				SellerName: &leftSeller,
				Offers: []*model.Offer{
					{
						Name:  leftSeller,
						Price: leftPrice,
					},
					{
						Name:  leftSeller + "_1",
						Price: leftPrice + 1,
					},
					{
						Name:  leftSeller + "_12",
						Price: leftPrice + 12,
					},
					{
						Name:  leftSeller + "_21",
						Price: leftPrice + 2,
					},
					{
						Name:  leftSeller + "_3",
						Price: leftPrice + 3,
					},
					{
						Name:  leftSeller + "_33",
						Price: leftPrice + 1,
					},
					{
						Name:  leftSeller + "_2",
						Price: leftPrice + 8,
					},
					{
						Name:  leftSeller + "_4",
						Price: leftPrice + 8,
					},
				},
			},
			RightProductInfo: &model.ProductInfo{
				ID:         productID,
				Type:       model.ProductIDTypeUpc,
				Title:      "HELLO WORLD DUMMY PRODUCT FALAN, ID:" + productID,
				Price:      &rightPrice,
				SellerName: &rightSeller,
				Offers: []*model.Offer{
					{
						Name:  rightSeller,
						Price: rightPrice,
					},
					{
						Name:  rightSeller + "_2",
						Price: rightPrice + 1,
					},
					{
						Name:  rightSeller + "_3",
						Price: rightPrice + 21,
					},
					{
						Name:  rightSeller + "_4",
						Price: rightPrice + 8,
					},
					{
						Name:  rightSeller + "_5",
						Price: rightPrice + 6,
					},
				},
			},
		})
	}

	return dummy, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
